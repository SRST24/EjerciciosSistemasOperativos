#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // tamaño del buffer

int buffer[N];
int count = 0;   // número de elementos en el buffer
int in = 0, out = 0;

sem_t empty;     // cuenta espacios vacíos
sem_t full;      // cuenta elementos llenos
pthread_mutex_t mutex; // exclusión mutua

void *productor(void *arg) {
    int item;
    while (1) {
        item = rand() % 100;          // producir un elemento
        sem_wait(&empty);             // esperar si no hay espacio
        pthread_mutex_lock(&mutex);

        buffer[in] = item;
        in = (in + 1) % N;
        count++;
        printf("Productor produjo: %d | Elementos en buffer: %d\n", item, count);

        pthread_mutex_unlock(&mutex);
        sem_post(&full);              // señalar que hay un item nuevo
        sleep(1);
    }
    return NULL;
}

void *consumidor(void *arg) {
    int item;
    while (1) {
        sem_wait(&full);              // esperar si no hay elementos
        pthread_mutex_lock(&mutex);

        item = buffer[out];
        out = (out + 1) % N;
        count--;
        printf("Consumidor consumió: %d | Elementos en buffer: %d\n", item, count);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);             // señalar que hay un espacio vacío
        sleep(2);
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, N);  // N espacios vacíos al inicio
    sem_init(&full, 0, 0);   // 0 elementos llenos al inicio
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prod, NULL, productor, NULL);
    pthread_create(&cons, NULL, consumidor, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
